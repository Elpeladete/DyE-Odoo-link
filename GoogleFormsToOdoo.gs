/**
 * Google Forms to Odoo Integration Script
 * Este script captura las respuestas de Google Forms y las env√≠a a Odoo como leads
 * Basado en el sistema existente de DyE-Odoo-Link
 */

// ===============================
// CONFIGURACI√ìN PRINCIPAL
// ===============================

const ODOO_CONFIG = {
  url: "https://dye.quilsoft.com",
  db: "dye_prod", 
  login: "maused@dyesa.com",
  password: "967ce27624f6e6bfdf1b674efcbc2fda5603796e"
};

const FORM_CONFIG = {
  // ID del formulario de Google Forms
  // IMPORTANTE: Extraer el ID correcto de la URL del formulario
  // URL ejemplo: https://docs.google.com/forms/d/[ID_DEL_FORMULARIO]/viewform
  formId: "1b1-Adg1riv2aF6X_8cgtqLrsEAWgiToFJurQJcL2tKA",
  // Mapeo de entry IDs a nombres de campos
  fieldMapping: {
    "entry.1656615011": "apellido",
    "entry.1575414634": "nombre", 
    "entry.719416093": "localidad",
    "entry.706927167": "provincia",
    "entry.545349691": "telefono",
    "entry.518556737": "mail",
    "entry.620044556": "verticales", // Concatenated checkboxes
    "entry.1203722377": "comentarios",
    "entry.1848186805": "montoEstimado",
    "entry.759729973": "presupuesto",
    "entry.276961824": "operadorApp", // OPERADOR: Persona que usa la app para registrar
    "entry.1185082508": "comercialAsignado", // COMERCIAL: Vendedor/representante asignado
    "entry.716935390": "evento",
    "entry.1582004362": "empresaOperador", // EMPRESA: Empresa/organizaci√≥n registradora
    // Checkboxes individuales de verticales/intereses
    "entry.1677960690": "weedSeeker",
    "entry.1491059195": "solucionSiembra", 
    "entry.2007292571": "solucionPulverizacion",
    "entry.326858464": "postVenta",
    "entry.725115806": "dronesDJI",
    "entry.964478392": "guiaAutoguia", 
    "entry.1908485191": "tapsSenales",
    "entry.1736207191": "accionQR"
  }
};

/**
 * Funci√≥n para extraer el ID correcto del formulario desde una URL
 * Usa esta funci√≥n si tienes problemas con el ID del formulario
 */
function extractFormIdFromUrl() {
  // URLs de ejemplo que pueden funcionar:
  const possibleUrls = [
    "https://docs.google.com/forms/d/1FAIpQLSduy_8Q5StXatYz8A-2rmfGNAFqlL0I9YMb5dS8Q5fCovWN3w/viewform",
    "https://docs.google.com/forms/d/1FAIpQLSduy_8Q5StXatYz8A-2rmfGNAFqlL0I9YMb5dS8Q5fCovWN3w/edit"
  ];
  
  Logger.log("=== EXTRACCI√ìN DE ID DE FORMULARIO ===");
  Logger.log("URL original proporcionada:");
  Logger.log("https://docs.google.com/forms/d/e/1FAIpQLSduy_8Q5StXatYz8A-2rmfGNAFqlL0I9YMb5dS8Q5fCovWN3w/viewform");
  Logger.log("");
  
  // El ID correcto podr√≠a ser diferente. Intentemos varias opciones:
  const possibleIds = [
    "1FAIpQLSduy_8Q5StXatYz8A-2rmfGNAFqlL0I9YMb5dS8Q5fCovWN3w", // ID actual
    // Agregar otros IDs posibles si es necesario
  ];
  
  Logger.log("IDs a probar:");
  possibleIds.forEach((id, index) => {
    Logger.log(`${index + 1}. ${id}`);
  });
  
  Logger.log("");
  Logger.log("üí° C√ìMO OBTENER EL ID CORRECTO:");
  Logger.log("1. Ve al formulario en modo edici√≥n");
  Logger.log("2. La URL deber√≠a ser: https://docs.google.com/forms/d/[ID]/edit");
  Logger.log("3. Copia el ID de esa URL y actualiza FORM_CONFIG.formId");
  Logger.log("=====================================");
  
  return possibleIds;
}

// ===============================
// FUNCI√ìN PRINCIPAL DE TRIGGER
// ===============================

/**
 * Funci√≥n que se ejecuta autom√°ticamente cuando se env√≠a una respuesta al formulario
 * Configura este trigger en Google Apps Script: Triggers > Nuevo trigger > Al enviar formulario
 */
function onFormSubmit(e) {
  try {
    Logger.log("=== INICIO PROCESAMIENTO RESPUESTA GOOGLE FORMS ===");
    
    // Extraer datos de la respuesta
    const formData = extractFormData(e);
    Logger.log("Datos extra√≠dos del formulario: " + JSON.stringify(formData, null, 2));
      // Procesar verticales/checkboxes
    formData.concatenatedCheckboxes = processVerticales(formData);
    
    // Agregar pa√≠s por defecto si no est√° especificado
    if (!formData.pais) {
      formData.pais = "Argentina";
    }    // Log de datos procesados para debug
    Logger.log("üìã DATOS PROCESADOS:");
    Logger.log("üë§ Persona: " + (formData.nombre || '') + " " + (formData.apellido || ''));
    Logger.log("üìß Email: " + (formData.mail || 'No proporcionado'));
    Logger.log("üìû Tel√©fono: " + (formData.telefono || 'No proporcionado'));
    Logger.log("üè¢ Empresa registradora: " + (formData.empresaRegistradora || 'No especificada'));
    Logger.log("üë®‚Äçüíº Registrador/Operador: " + (formData.registrador || 'No especificado'));
    Logger.log("üíº Comercial asignado: " + (formData.comercial || 'No asignado'));
    Logger.log("üéØ Verticales: " + (formData.concatenatedCheckboxes || 'Ninguna'));
    Logger.log("üí¨ Comentarios: " + (formData.comentarios || 'Sin comentarios'));
    Logger.log("üé™ Evento: " + (formData.evento || 'No especificado'));
    
    // Enviar a Odoo
    const odooResult = createOdooLead(formData);
    
    if (odooResult.success) {
      Logger.log("‚úÖ Lead creado exitosamente en Odoo con ID: " + odooResult.lead_id);
        // Opcional: Enviar notificaci√≥n por WhatsApp usando Wazzup
      try {
        if (formData.telefono && formData.comercial) {
          sendWazzupNotification(formData);
        }
      } catch (whatsappError) {
        Logger.log("‚ö†Ô∏è Error en notificaci√≥n WhatsApp (no cr√≠tico): " + whatsappError.toString());
      }
      
    } else {
      Logger.log("‚ùå Error al crear lead en Odoo: " + odooResult.error);
      
      // Opcional: Guardar en una hoja de c√°lculo para retry manual
      saveFailedSubmission(formData, odooResult.error);
    }
    
  } catch (error) {
    Logger.log("‚ùå Error cr√≠tico en onFormSubmit: " + error.toString());
    
    // Opcional: Enviar email de notificaci√≥n al administrador
    sendErrorNotification(error, e);
  }
  
  Logger.log("=== FIN PROCESAMIENTO RESPUESTA GOOGLE FORMS ===");
}

// ===============================
// EXTRACCI√ìN Y PROCESAMIENTO DE DATOS
// ===============================

/**
 * Extrae los datos de la respuesta del formulario
 */
function extractFormData(e) {
  const formData = {};
  
  try {
    // Obtener respuestas del evento
    const itemResponses = e.response.getItemResponses();
    
    // Procesar cada respuesta
    for (const itemResponse of itemResponses) {
      const question = itemResponse.getItem().getTitle();
      const answer = itemResponse.getResponse();
        // Mapear pregunta a campo conocido
      const fieldName = mapQuestionToField(question);
      if (fieldName) {
        // Manejar respuestas m√∫ltiples (checkboxes)
        if (Array.isArray(answer)) {
          // Para checkboxes m√∫ltiples, concatenar con comas
          formData[fieldName] = answer.join(", ");
        } else {
          formData[fieldName] = answer;
        }
        
        // Debugging espec√≠fico para campos problem√°ticos
        if (question.toUpperCase().includes("EMPRESAREGISTRADOR")) {
          Logger.log(`üîç DEBUG EMPRESAREGISTRADOR: "${question}" -> "${fieldName}" -> "${answer}"`);
        }
      }
      
      Logger.log(`Pregunta: "${question}" -> Campo: "${fieldName}" -> Respuesta: "${answer}"`);
    }
    
    // Procesar verticales de checkboxes individuales
    formData.verticalesSeleccionadas = extractSelectedVerticals(itemResponses);
    
    // Validaciones b√°sicas
    if (!formData.nombre) {
      throw new Error("Nombre es requerido");
    }
    if (!formData.apellido) {
      throw new Error("Apellido es requerido");
    }
    
    // ‚úÖ VALIDACI√ìN ADICIONAL DE DATOS CR√çTICOS
    Logger.log("üîç Validando datos cr√≠ticos...");
    
    const nombreCompleto = formData.nombre + " " + formData.apellido;
    Logger.log("‚úÖ Nombre completo: " + nombreCompleto);
    
    // Validar email si est√° presente
    if (formData.mail && formData.mail.trim() !== '') {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.mail)) {
        Logger.log("‚ö†Ô∏è Email inv√°lido, se ignorar√°: " + formData.mail);
        formData.mail = ''; // Limpiar email inv√°lido
      } else {
        Logger.log("‚úÖ Email v√°lido: " + formData.mail);
      }
    } else {
      Logger.log("‚ö†Ô∏è Email no proporcionado o vac√≠o");
    }
    
    // Validar tel√©fono si est√° presente
    if (formData.telefono && formData.telefono.trim() !== '') {
      Logger.log("‚úÖ Tel√©fono: " + formData.telefono);
    } else {
      Logger.log("‚ö†Ô∏è Tel√©fono no proporcionado");
    }
    
    return formData;
    
  } catch (error) {
    Logger.log("Error al extraer datos del formulario: " + error.toString());
    throw error;
  }
}

/**
 * Extrae las verticales seleccionadas de los checkboxes individuales
 */
function extractSelectedVerticals(itemResponses) {
  const selectedVerticals = [];
  
  // Mapeo de preguntas a etiquetas de verticales
  const verticalMappings = {
    "weed": "WeedSeeker",
    "seeker": "WeedSeeker", 
    "siembra": "Soluci√≥n Siembra",
    "pulverizaci√≥n": "Soluci√≥n Pulverizaci√≥n",
    "pulverizacion": "Soluci√≥n Pulverizaci√≥n",
    "post": "Post Venta",
    "venta": "Post Venta",
    "drone": "Drones DJI",
    "dji": "Drones DJI",
    "gu√≠a": "Gu√≠a/Autogu√≠a",
    "autogu√≠a": "Gu√≠a/Autogu√≠a",
    "autoguia": "Gu√≠a/Autogu√≠a",
    "taps": "Taps y Se√±ales",
    "se√±ales": "Taps y Se√±ales",
    "senales": "Taps y Se√±ales",
    "qr": "Acci√≥n QR"
  };
  
  try {
    for (const itemResponse of itemResponses) {
      const question = itemResponse.getItem().getTitle().toLowerCase();
      const answer = itemResponse.getResponse();
      
      // Verificar si la respuesta indica que el checkbox est√° seleccionado
      const isSelected = answer === true || 
                        answer === "true" || 
                        answer === "TRUE" || 
                        answer === "S√≠" || 
                        answer === "Si" || 
                        answer === "Yes" ||
                        (typeof answer === 'string' && answer.toLowerCase().includes("s√≠")) ||
                        (typeof answer === 'string' && answer.toLowerCase().includes("si")) ||
                        (Array.isArray(answer) && answer.length > 0);
      
      if (isSelected) {
        // Buscar coincidencia en el mapeo de verticales
        for (const [keyword, label] of Object.entries(verticalMappings)) {
          if (question.includes(keyword) && !selectedVerticals.includes(label)) {
            selectedVerticals.push(label);
            Logger.log(`‚úì Vertical seleccionada: "${label}" (desde pregunta: "${question}")`);
            break;
          }
        }
      }
    }
    
    return selectedVerticals;
    
  } catch (error) {
    Logger.log("Error extrayendo verticales: " + error.toString());
    return [];
  }
}

/**
 * Mapea las preguntas del formulario a nombres de campos
 */
function mapQuestionToField(question) {
  const questionMappings = {
    // Datos personales b√°sicos
    "APELLIDO": "apellido",
    "APELLIDOS": "apellido",
    "SURNAME": "apellido",
    "NOMBRE": "nombre",
    "NOMBRES": "nombre", 
    "NAME": "nombre",
    
    // Ubicaci√≥n
    "LOCALIDAD": "localidad",
    "CIUDAD": "localidad",
    "CITY": "localidad", 
    "PROVINCIA": "provincia",
    "ESTADO": "provincia",
    "STATE": "provincia",
    
    // Contacto
    "TEL√âFONO": "telefono",
    "TELEFONO": "telefono",
    "PHONE": "telefono",
    "CELULAR": "telefono",
    "EMAIL": "mail",
    "MAIL": "mail",
    "CORREO": "mail",
    
    // Intereses y comentarios
    "VERTICALES": "verticales",
    "INTERESES": "verticales",
    "COMENTARIOS": "comentarios",
    "COMENTARIO": "comentarios",
    "OBSERVACIONES": "comentarios",
      // Montos y presupuesto
    "MONTO": "montoEstimado",
    "PRESUPUESTO": "presupuesto",
    "BUDGET": "presupuesto",
    
    // ‚ö†Ô∏è IMPORTANTE: Empresa registradora DEBE ir ANTES que registrador 
    // porque "EMPRESAREGISTRADOR" contiene "REGISTRADOR"
    "EMPRESAREGISTRADOR": "empresaRegistradora",
    "EMPRESA REGISTRADORA": "empresaRegistradora", 
    "EMPRESA REGISTRADOR": "empresaRegistradora",
    "EMPRESA DEL REGISTRADOR": "empresaRegistradora",
    "EMPRESA QUE REGISTRA": "empresaRegistradora",
    "EMPRESA": "empresaRegistradora",
    "COMPA√ëIA": "empresaRegistradora",
    "COMPANY": "empresaRegistradora",
    "ORGANIZACION": "empresaRegistradora",
    "ORGANIZACI√ìN": "empresaRegistradora",
    
    // Registrador (persona que registra/operador) - mapea a "registrador"
    "REGISTRADOR": "registrador",
    "OPERADOR": "registrador",
    "OPERADOR APP": "registrador",
    "OPERADOR DE LA APP": "registrador",
    "REGISTRA": "registrador",
    "QUIEN REGISTRA": "registrador",
    "NOMBRE REGISTRADOR": "registrador",
    "NOMBRE DEL REGISTRADOR": "registrador",
    "PERSONA QUE REGISTRA": "registrador",
    
    // Asignado a (comercial) - mapea a "comercial"
    "ASIGNADO A": "comercial",
    "ASIGNADOA": "comercial",
    "COMERCIAL": "comercial",
    "COMERCIAL ASIGNADO": "comercial",
    "COMERCIALASIGNADO": "comercial",
    "VENDEDOR": "comercial",
    "VENDEDOR ASIGNADO": "comercial",
    "REPRESENTANTE": "comercial",
    "REPRESENTANTE COMERCIAL": "comercial",
    "ASESOR": "comercial",
    "ASESOR COMERCIAL": "comercial",
    
    // Evento
    "EVENTO": "evento",
    "EVENT": "evento",
    "EXHIBITION": "evento",
    "EXPOSICION": "evento",
    "EXPOSICI√ìN": "evento"
  };
  
  // Buscar coincidencia exacta o parcial (normalizar texto)
  const normalizedQuestion = question.toUpperCase().replace(/[√°√©√≠√≥√∫√±]/g, match => {
    const replacements = {'√°': 'A', '√©': 'E', '√≠': 'I', '√≥': 'O', '√∫': 'U', '√±': 'N'};
    return replacements[match] || match;
  });
    // Primero buscar coincidencias EXACTAS
  for (const [key, value] of Object.entries(questionMappings)) {
    if (normalizedQuestion === key) {
      return value;
    }
  }
  
  // Luego buscar coincidencias parciales, pero priorizar las m√°s espec√≠ficas (m√°s largas)
  const partialMatches = [];
  for (const [key, value] of Object.entries(questionMappings)) {
    if (normalizedQuestion.includes(key)) {
      partialMatches.push({key, value, length: key.length});
    }
  }
  
  // Ordenar por longitud descendente (m√°s espec√≠fico primero)
  if (partialMatches.length > 0) {
    partialMatches.sort((a, b) => b.length - a.length);
    return partialMatches[0].value;
  }
  
  // Para checkboxes, mapear por contenido espec√≠fico
  const questionLower = question.toLowerCase();
  
  if (questionLower.includes("weed") || questionLower.includes("seeker")) {
    return "weedSeeker";
  }
  if (questionLower.includes("siembra")) {
    return "solucionSiembra";
  }
  if (questionLower.includes("pulverizaci√≥n") || questionLower.includes("pulverizacion")) {
    return "solucionPulverizacion";
  }
  if (questionLower.includes("post") && questionLower.includes("venta")) {
    return "postVenta";
  }
  if (questionLower.includes("drone")) {
    return "dronesDJI";
  }
  if (questionLower.includes("gu√≠a") || questionLower.includes("autogu√≠a") || questionLower.includes("autoguia")) {
    return "guiaAutoguia";
  }
  if (questionLower.includes("taps") || questionLower.includes("se√±ales") || questionLower.includes("senales")) {
    return "tapsSenales";
  }
  if (questionLower.includes("qr")) {
    return "accionQR";
  }
  
  return null;
}

/**
 * Procesa las verticales/checkboxes seleccionadas
 */
function processVerticales(formData) {
  const verticales = [];
  
  // Primero agregar verticales extra√≠das autom√°ticamente
  if (formData.verticalesSeleccionadas && formData.verticalesSeleccionadas.length > 0) {
    verticales.push(...formData.verticalesSeleccionadas);
    Logger.log("Verticales autom√°ticas agregadas: " + formData.verticalesSeleccionadas.join(", "));
  }
  
  // Luego verificar campos individuales de checkboxes
  const checkboxFields = [
    { field: "weedSeeker", label: "WeedSeeker" },
    { field: "solucionSiembra", label: "Soluci√≥n Siembra" },
    { field: "solucionPulverizacion", label: "Soluci√≥n Pulverizaci√≥n" },
    { field: "postVenta", label: "Post Venta" },
    { field: "dronesDJI", label: "Drones DJI" },
    { field: "guiaAutoguia", label: "Gu√≠a/Autogu√≠a" },
    { field: "tapsSenales", label: "Taps y Se√±ales" },
    { field: "accionQR", label: "Acci√≥n QR" }
  ];
  
  for (const checkbox of checkboxFields) {
    const value = formData[checkbox.field];
    
    // Verificar m√∫ltiples formas de "verdadero"
    const isSelected = value === "TRUE" || 
                      value === true || 
                      value === "true" || 
                      value === "S√≠" ||
                      value === "Si" ||
                      value === "Yes" ||
                      value === "1" ||
                      (typeof value === 'string' && value.toLowerCase().includes("s√≠")) ||
                      (typeof value === 'string' && value.toLowerCase().includes("si")) ||
                      (Array.isArray(value) && value.length > 0) ||
                      (typeof value === 'string' && value.trim() !== "" && value !== "FALSE" && value !== "false" && value !== "No");
    
    if (isSelected && !verticales.includes(checkbox.label)) {
      verticales.push(checkbox.label);
      Logger.log(`‚úì Checkbox agregado: ${checkbox.field} = "${value}" -> ${checkbox.label}`);
    } else if (value) {
      Logger.log(`‚úó Checkbox no agregado: ${checkbox.field} = "${value}" (no cumple criterios)`);
    }
  }
  
  // Si hay campo verticales directo, agregarlo tambi√©n
  if (formData.verticales && typeof formData.verticales === 'string' && formData.verticales.trim() !== '') {
    // Dividir por comas si es una lista
    const directVerticals = formData.verticales.split(',').map(v => v.trim()).filter(v => v !== '');
    for (const vertical of directVerticals) {
      if (!verticales.includes(vertical)) {
        verticales.push(vertical);
        Logger.log(`‚úì Vertical directa agregada: ${vertical}`);
      }
    }
  }
  
  const result = verticales.join(", ");
  Logger.log(`üéØ Verticales finales concatenadas: "${result}"`);
  
  return result;
}

// ===============================
// FUNCIONES DE INTEGRACI√ìN CON ODOO
// ===============================

// Copiar las funciones XML-RPC del archivo gs.gs original

/**
 * Crear payload XML-RPC
 */
function createXmlRpcPayload(method, params) {
  let payload = '<?xml version="1.0"?><methodCall><methodName>' + method + '</methodName><params>';
  
  for (const param of params) {
    payload += '<param><value>' + convertJsValueToXmlRpc(param) + '</value></param>';
  }
  
  payload += '</params></methodCall>';
  return payload;
}

/**
 * Convertir valor JS a XML-RPC
 */
function convertJsValueToXmlRpc(value) {
  if (typeof value === 'string') {
    return '<string>' + escapeXml(value) + '</string>';
  } else if (typeof value === 'number') {
    if (Number.isInteger(value)) {
      return '<int>' + value + '</int>';
    } else {
      return '<double>' + value + '</double>';
    }
  } else if (typeof value === 'boolean') {
    return '<boolean>' + (value ? '1' : '0') + '</boolean>';
  } else if (Array.isArray(value)) {
    let arrayXml = '<array><data>';
    for (const item of value) {
      arrayXml += '<value>' + convertJsValueToXmlRpc(item) + '</value>';
    }
    arrayXml += '</data></array>';
    return arrayXml;
  } else if (typeof value === 'object' && value !== null) {
    let structXml = '<struct>';
    for (const [key, val] of Object.entries(value)) {
      structXml += '<member><name>' + escapeXml(key) + '</name><value>' + convertJsValueToXmlRpc(val) + '</value></member>';
    }
    structXml += '</struct>';
    return structXml;
  } else {
    return '<string></string>';
  }
}

/**
 * Escapar caracteres XML
 */
function escapeXml(unsafe) {
  return unsafe.replace(/[<>&'"]/g, function (c) {
    switch (c) {
      case '<': return '&lt;';
      case '>': return '&gt;';
      case '&': return '&amp;';
      case '\'': return '&apos;';
      case '"': return '&quot;';
    }
  });
}

/**
 * Parsear respuesta XML-RPC
 */
function parseXmlRpcResponse(xmlString) {
  try {
    const doc = XmlService.parse(xmlString);
    const root = doc.getRootElement();
    
    // Buscar elementos de respuesta o falla
    const paramsElement = root.getChild('params');
    const faultElement = root.getChild('fault');
    
    if (faultElement) {
      const faultValue = parseXmlRpcValue(faultElement.getChild('value'));
      throw new Error('XML-RPC Fault: ' + JSON.stringify(faultValue));
    }
    
    if (paramsElement) {
      const paramElements = paramsElement.getChildren('param');
      if (paramElements.length > 0) {
        const valueElement = paramElements[0].getChild('value');
        return parseXmlRpcValue(valueElement);
      }
    }
    
    throw new Error('Respuesta XML-RPC inv√°lida');
    
  } catch (error) {
    Logger.log("Error parseando respuesta XML-RPC: " + error.toString());
    throw error;
  }
}

/**
 * Parsear valor XML-RPC recursivamente
 */
function parseXmlRpcValue(valueElement) {
  if (!valueElement) return null;
  
  const children = valueElement.getChildren();
  if (children.length === 0) {
    return valueElement.getText();
  }
  
  const firstChild = children[0];
  const tagName = firstChild.getName();
  
  switch (tagName) {
    case 'string':
      return firstChild.getText();
    case 'int':
    case 'i4':
      return parseInt(firstChild.getText());
    case 'double':
      return parseFloat(firstChild.getText());
    case 'boolean':
      return firstChild.getText() === '1';
    case 'array':
      const dataElement = firstChild.getChild('data');
      const result = [];
      if (dataElement) {
        const valueElements = dataElement.getChildren('value');
        for (const ve of valueElements) {
          result.push(parseXmlRpcValue(ve));
        }
      }
      return result;
    case 'struct':
      const structResult = {};
      const memberElements = firstChild.getChildren('member');
      for (const member of memberElements) {
        const nameElement = member.getChild('name');
        const valueEl = member.getChild('value');
        if (nameElement && valueEl) {
          structResult[nameElement.getText()] = parseXmlRpcValue(valueEl);
        }
      }
      return structResult;
    default:
      return firstChild.getText();
  }
}

/**
 * Login XML-RPC en Odoo
 */
function xmlrpcLogin(url, db, username, password) {
  Logger.log("Iniciando login XML-RPC en Odoo");
  
  try {
    const loginUrl = url + '/xmlrpc/2/common';
    const payload = createXmlRpcPayload('authenticate', [db, username, password, {}]);
    
    const options = {
      'method': 'post',
      'contentType': 'text/xml',
      'payload': payload,
      'muteHttpExceptions': true
    };
    
    const response = UrlFetchApp.fetch(loginUrl, options);
    const responseCode = response.getResponseCode();
    const responseText = response.getContentText();
    
    if (responseCode !== 200) {
      throw new Error('Error de autenticaci√≥n: ' + responseText);
    }
    
    const result = parseXmlRpcResponse(responseText);
    
    if (!result) {
      throw new Error('Credenciales inv√°lidas');
    }
    
    Logger.log("Login exitoso con UID: " + result);
    return result;
    
  } catch (error) {
    Logger.log("Error en xmlrpcLogin: " + error.toString());
    throw error;
  }
}

/**
 * Ejecutar m√©todo XML-RPC
 */
function xmlrpcExecute(url, db, uid, password, model, method, args) {
  Logger.log(`Ejecutando m√©todo XML-RPC: ${method} en modelo: ${model}`);
  
  try {
    const executeUrl = url + '/xmlrpc/2/object';
    const payload = createXmlRpcPayload('execute_kw', [db, uid, password, model, method, args]);
    
    const options = {
      'method': 'post',
      'contentType': 'text/xml',
      'payload': payload,
      'muteHttpExceptions': true
    };
    
    const response = UrlFetchApp.fetch(executeUrl, options);
    const responseCode = response.getResponseCode();
    const responseText = response.getContentText();
    
    if (responseCode !== 200) {
      throw new Error('Error en la ejecuci√≥n: ' + responseText);
    }
    
    const result = parseXmlRpcResponse(responseText);
    Logger.log("Ejecuci√≥n exitosa");
    
    return result;
    
  } catch (error) {
    Logger.log("Error en xmlrpcExecute: " + error.toString());
    throw error;
  }
}

/**
 * Crear lead en Odoo (funci√≥n principal)
 */
function createOdooLead(formData) {
  try {
    Logger.log("Iniciando creaci√≥n de lead en Odoo");
    
    // Autenticaci√≥n en Odoo
    const uid = xmlrpcLogin(ODOO_CONFIG.url, ODOO_CONFIG.db, ODOO_CONFIG.login, ODOO_CONFIG.password);
    Logger.log("Autenticaci√≥n exitosa en Odoo con UID: " + uid);
    
    // Preparar datos para el lead
    const nombreCompleto = formData.nombre + " " + formData.apellido;
    Logger.log(`Preparando datos para: ${nombreCompleto}, Email: ${formData.mail}, Tel√©fono: ${formData.telefono}`);
      // Construir descripci√≥n detallada como HTML
    let descripcion = `<div style="font-family: Arial, sans-serif; line-height: 1.6;">`;
    descripcion += `<h2 style="color: #2E75B6; margin-bottom: 20px;">üìã INFORMACI√ìN DEL PROSPECTO</h2>`;
    
    descripcion += `<div style="margin-bottom: 20px;">`;
    descripcion += `<h3 style="color: #1B5E20; border-bottom: 2px solid #4CAF50; padding-bottom: 5px;">üë§ DATOS PERSONALES</h3>`;
    descripcion += `<ul style="margin: 10px 0; padding-left: 20px;">`;
    descripcion += `<li><strong>Nombre completo:</strong> ${nombreCompleto}</li>`;
    descripcion += `<li><strong>Tel√©fono:</strong> ${formData.telefono || '<em>No proporcionado</em>'}</li>`;
    descripcion += `<li><strong>Email:</strong> ${formData.mail || '<em>No proporcionado</em>'}</li>`;
    descripcion += `</ul>`;
    descripcion += `</div>`;
    
    descripcion += `<div style="margin-bottom: 20px;">`;
    descripcion += `<h3 style="color: #1B5E20; border-bottom: 2px solid #4CAF50; padding-bottom: 5px;">üåç UBICACI√ìN</h3>`;
    descripcion += `<ul style="margin: 10px 0; padding-left: 20px;">`;
    descripcion += `<li><strong>Localidad:</strong> ${formData.localidad || '<em>No proporcionada</em>'}</li>`;
    descripcion += `<li><strong>Provincia:</strong> ${formData.provincia || '<em>No proporcionada</em>'}</li>`;
    descripcion += `<li><strong>Pa√≠s:</strong> ${formData.pais || '<em>No proporcionado</em>'}</li>`;
    descripcion += `</ul>`;
    descripcion += `</div>`;
    
    descripcion += `<div style="margin-bottom: 20px;">`;
    descripcion += `<h3 style="color: #1B5E20; border-bottom: 2px solid #4CAF50; padding-bottom: 5px;">üéØ INTERESES (VERTICALES)</h3>`;
    if (formData.concatenatedCheckboxes && formData.concatenatedCheckboxes.trim() !== '') {
      const verticales = formData.concatenatedCheckboxes.split(',').map(v => v.trim()).filter(v => v !== '');
      descripcion += `<ul style="margin: 10px 0; padding-left: 20px;">`;
      verticales.forEach(vertical => {
        descripcion += `<li><span style="background-color: #E3F2FD; padding: 2px 8px; border-radius: 12px; font-size: 0.9em;">${vertical}</span></li>`;
      });
      descripcion += `</ul>`;
    } else {
      descripcion += `<p style="font-style: italic; color: #666;">No se especificaron intereses particulares</p>`;
    }
    descripcion += `</div>`;
    
    descripcion += `<div style="margin-bottom: 20px;">`;
    descripcion += `<h3 style="color: #1B5E20; border-bottom: 2px solid #4CAF50; padding-bottom: 5px;">üíº DETALLES COMERCIALES</h3>`;
    descripcion += `<ul style="margin: 10px 0; padding-left: 20px;">`;
    if (formData.comentarios && formData.comentarios.trim() !== '') {
      descripcion += `<li><strong>Comentarios:</strong> <div style="background-color: #F5F5F5; padding: 10px; border-left: 4px solid #2196F3; margin: 5px 0;">${formData.comentarios}</div></li>`;
    } else {
      descripcion += `<li><strong>Comentarios:</strong> <em>Sin comentarios adicionales</em></li>`;
    }
    descripcion += `<li><strong>Monto Estimado:</strong> ${formData.montoEstimado || '<em>No especificado</em>'}</li>`;
    descripcion += `<li><strong>Presupuesto:</strong> ${formData.presupuesto || '<em>No especificado</em>'}</li>`;
    descripcion += `</ul>`;
    descripcion += `</div>`;
    
    descripcion += `<div style="margin-bottom: 20px;">`;
    descripcion += `<h3 style="color: #1B5E20; border-bottom: 2px solid #4CAF50; padding-bottom: 5px;">üìã INFORMACI√ìN DE REGISTRO</h3>`;
    descripcion += `<ul style="margin: 10px 0; padding-left: 20px;">`;
    descripcion += `<li><strong>Registrador (Operador):</strong> ${formData.registrador || '<em>No especificado</em>'}</li>`;
    descripcion += `<li><strong>Empresa Registradora:</strong> ${formData.empresaRegistradora || '<em>No especificada</em>'}</li>`;
    descripcion += `<li><strong>Comercial Asignado:</strong> ${formData.comercial || '<em>No asignado</em>'}</li>`;
    descripcion += `<li><strong>Evento:</strong> ${formData.evento || '<em>No especificado</em>'}</li>`;
    descripcion += `</ul>`;
    descripcion += `</div>`;
    
    descripcion += `<div style="background-color: #E8F5E8; padding: 15px; border-radius: 8px; margin-bottom: 20px;">`;
    descripcion += `<h3 style="color: #1B5E20; margin-top: 0;">‚ÑπÔ∏è INFORMACI√ìN ADICIONAL</h3>`;
    descripcion += `<ul style="margin: 5px 0; padding-left: 20px;">`;
    descripcion += `<li><strong>Origen:</strong> <span style="background-color: #4CAF50; color: white; padding: 2px 8px; border-radius: 4px; font-size: 0.9em;">Google Forms</span></li>`;
    descripcion += `<li><strong>Fecha de registro:</strong> ${new Date().toLocaleString('es-AR')}</li>`;
    descripcion += `</ul>`;
    descripcion += `</div>`;
    descripcion += `</div>`;    // Construir los datos para Odoo
    const verticalesParaTitulo = formData.concatenatedCheckboxes && formData.concatenatedCheckboxes.trim() !== '' 
      ? formData.concatenatedCheckboxes 
      : 'Consulta General';
    
    // üåç B√∫squeda din√°mica de pa√≠s basada en localidad y provincia
    const countryId = findCountryByLocation(
      ODOO_CONFIG.url, 
      ODOO_CONFIG.db, 
      uid, 
      ODOO_CONFIG.password, 
      formData.localidad, 
      formData.provincia
    );
      // Validar email - si est√° vac√≠o, no enviarlo (evita problemas en Odoo)
    const emailField = (formData.mail && formData.mail.trim() !== '') ? formData.mail.trim() : null;
    
    const odooLeadData = {
      'name': `${nombreCompleto} - ${verticalesParaTitulo}`,
      'contact_name': nombreCompleto,
      'phone': formData.telefono || '',
      'description': descripcion,
      'type': 'lead',
      'street': formData.localidad || '',
      'city': formData.localidad || '',
      'country_id': countryId,
      'campaign_id': '',
      'source_id': '',      'referred': formData.evento || ''
    };
    
    // Agregar email solo si tiene un valor v√°lido
    if (emailField) {
      odooLeadData['email_from'] = emailField;
      Logger.log("‚úÖ Email agregado: " + emailField);
    } else {
      Logger.log("‚ö†Ô∏è Email vac√≠o o inv√°lido, no se agregar√° al lead");
    }
    
    // Buscar y asignar comercial (salesperson)
    if (formData.comercial && formData.comercial.trim() !== '') {
      const salespersonId = getSalespersonId(ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password, formData.comercial);
      if (salespersonId) {
        odooLeadData['user_id'] = salespersonId;
        Logger.log("‚úÖ Comercial asignado con ID: " + salespersonId);
      } else {
        Logger.log("‚ö†Ô∏è No se pudo encontrar el comercial: " + formData.comercial);
      }
    }
      // ‚úÖ NO USAR CAMPOS PERSONALIZADOS - ya est√°n incluidos en la descripci√≥n HTML
    // Los datos de registrador y empresa ya est√°n en la descripci√≥n formateada
    Logger.log("‚ÑπÔ∏è Datos de registrador y empresa incluidos en descripci√≥n HTML");
    Logger.log("üìù Registrador: " + (formData.registrador || 'No especificado'));
    Logger.log("üè¢ Empresa registradora: " + (formData.empresaRegistradora || 'No especificada'));
    
    // Buscar el ID del pa√≠s din√°micamente si est√° especificado
    if (formData.pais) {
      const countryId = getCountryId(ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password, formData.pais);
      if (countryId) {
        odooLeadData['country_id'] = countryId;
        Logger.log("ID de pa√≠s encontrado y asignado: " + countryId + " para " + formData.pais);
      }
    }
      // üó∫Ô∏è Buscar provincia con pa√≠s din√°mico
    if (formData.provincia) {
      const provinceId = getProvinceIdDynamic(
        ODOO_CONFIG.url, 
        ODOO_CONFIG.db, 
        uid, 
        ODOO_CONFIG.password, 
        formData.provincia, 
        countryId
      );
      if (provinceId) {
        odooLeadData['state_id'] = provinceId;
        Logger.log("ID de provincia encontrado y asignado: " + provinceId);
      }
    }
    
    // Crear el lead en Odoo
    const leadId = xmlrpcExecute(
      ODOO_CONFIG.url,
      ODOO_CONFIG.db,
      uid,
      ODOO_CONFIG.password,
      'crm.lead',
      'create',
      [odooLeadData]
    );
    
    // Si se crea exitosamente, configurar campa√±a y origen
    if (leadId) {
      try {
        // Buscar o crear la campa√±a basada en el evento
        if (formData.evento) {
          const campaignId = getCampaignId(ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password, formData.evento);
          if (campaignId) {
            xmlrpcExecute(
              ODOO_CONFIG.url,
              ODOO_CONFIG.db,
              uid,
              ODOO_CONFIG.password,
              'crm.lead',
              'write',
              [[leadId], { 'campaign_id': campaignId }]
            );
            Logger.log("Lead actualizado con campa√±a ID: " + campaignId);
          }
        }
        
        // Buscar o crear el origen
        const sourceId = getSourceId(ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password, "Google Forms");
        if (sourceId) {
          xmlrpcExecute(
            ODOO_CONFIG.url,
            ODOO_CONFIG.db,
            uid,
            ODOO_CONFIG.password,
            'crm.lead',
            'write',
            [[leadId], { 'source_id': sourceId }]
          );
          Logger.log("Lead actualizado con origen ID: " + sourceId);
        }
      } catch (updateError) {
        Logger.log("Error al actualizar campa√±a/origen: " + updateError.toString());
        // Continuamos aunque falle esta parte
      }
    }
    
    Logger.log("Lead creado exitosamente en Odoo con ID: " + leadId);
    return { success: true, lead_id: leadId };
    
  } catch (error) {
    Logger.log("Error al crear lead en Odoo: " + error.toString());
    
    const errorMessage = error.message || error.toString();
    
    // Verificar si es error de duplicado
    if (errorMessage.toLowerCase().includes('duplicate') || 
        errorMessage.toLowerCase().includes('duplicado') ||
        errorMessage.toLowerCase().includes('already exists') ||
        errorMessage.toLowerCase().includes('ya existe')) {
      return { 
        success: false, 
        error: "Lead duplicado seg√∫n el servidor de Odoo: " + errorMessage,
        isDuplicate: true
      };
    }
    
    return { success: false, error: errorMessage };
  }
}

// ===============================
// FUNCIONES AUXILIARES DE ODOO
// ===============================

/**
 * Obtener o crear una campa√±a en Odoo
 */
function getCampaignId(url, db, uid, password, campaignName) {
  if (!campaignName) return null;
  
  try {
    const existingCampaigns = xmlrpcExecute(
      url, db, uid, password,
      'utm.campaign',
      'search_read',
      [[['name', '=', campaignName]], ['id', 'name'], 0, 1]
    );
    
    if (existingCampaigns && existingCampaigns.length > 0) {
      Logger.log("Campa√±a encontrada con ID: " + existingCampaigns[0].id);
      return existingCampaigns[0].id;
    }
    
    const newCampaignId = xmlrpcExecute(
      url, db, uid, password,
      'utm.campaign',
      'create',
      [{ 'name': campaignName }]
    );
    
    Logger.log("Nueva campa√±a creada con ID: " + newCampaignId);
    return newCampaignId;
  } catch (error) {
    Logger.log("Error al obtener/crear campa√±a: " + error.toString());
    return null;
  }
}

/**
 * Obtener o crear un origen en Odoo
 */
function getSourceId(url, db, uid, password, sourceName) {
  if (!sourceName) return null;
  
  try {
    const existingSources = xmlrpcExecute(
      url, db, uid, password,
      'utm.source',
      'search_read',
      [[['name', '=', sourceName]], ['id', 'name'], 0, 1]
    );
    
    if (existingSources && existingSources.length > 0) {
      Logger.log("Origen encontrado con ID: " + existingSources[0].id);
      return existingSources[0].id;
    }
    
    const newSourceId = xmlrpcExecute(
      url, db, uid, password,
      'utm.source',
      'create',
      [{ 'name': sourceName }]
    );
    
    Logger.log("Nuevo origen creado con ID: " + newSourceId);
    return newSourceId;
  } catch (error) {
    Logger.log("Error al obtener/crear origen: " + error.toString());
    return null;
  }
}

/**
 * Buscar el ID del pa√≠s en Odoo
 */
function getCountryId(url, db, uid, password, countryName) {
  if (!countryName) return null;
  
  try {
    const countries = xmlrpcExecute(
      url, db, uid, password,
      'res.country',
      'search_read',
      [[['name', 'ilike', countryName]], ['id', 'name'], 0, 1]
    );
    
    if (countries && countries.length > 0) {
      Logger.log("Pa√≠s encontrado: " + countries[0].name + " con ID: " + countries[0].id);
      return countries[0].id;
    }
    
    Logger.log("No se encontr√≥ el pa√≠s: " + countryName);
    return null;
  } catch (error) {
    Logger.log("Error al buscar pa√≠s: " + error.toString());
    return null;
  }
}

/**
 * Buscar el ID de la provincia en Odoo
 */
function getProvinceId(url, db, uid, password, provinceName, countryId = 10) {
  if (!provinceName) return null;
  
  try {
    const provinces = xmlrpcExecute(
      url, db, uid, password,
      'res.country.state',
      'search_read',
      [[['name', 'ilike', provinceName], ['country_id', '=', countryId]], ['id', 'name'], 0, 1]
    );
    
    if (provinces && provinces.length > 0) {
      Logger.log("Provincia encontrada: " + provinces[0].name + " con ID: " + provinces[0].id);
      return provinces[0].id;
    }
    
    Logger.log("No se encontr√≥ la provincia: " + provinceName);
    return null;
  } catch (error) {
    Logger.log("Error al buscar provincia: " + error.toString());
    return null;
  }
}

/**
 * Buscar comercial/salesperson en Odoo por nombre
 * B√∫squeda GLOBAL sin restricciones de empresa o equipo de ventas
 */
function getSalespersonId(url, db, uid, password, salespersonName) {
  if (!salespersonName || salespersonName.trim() === '') return null;
  
  try {
    Logger.log(`üîç Buscando comercial GLOBALMENTE (sin restricciones): "${salespersonName}"`);
    
    // 1. B√öSQUEDA PRINCIPAL: Usuarios SIN restricciones de empresa
    const userSearchCriteria = [
      '|', '|', '|', '|',
      ['name', 'ilike', salespersonName],
      ['login', 'ilike', salespersonName], 
      ['partner_id.name', 'ilike', salespersonName],
      ['partner_id.email', 'ilike', salespersonName],
      ['email', 'ilike', salespersonName]
    ];
    
    Logger.log("üîé Buscando en res.users (TODOS los usuarios, todas las empresas)...");
    
    // IMPORTANTE: Usar context vac√≠o para evitar filtros de empresa
    const contextFree = {};
    
    const existingUsers = xmlrpcExecute(
      url, db, uid, password,
      'res.users',
      'search_read',
      [userSearchCriteria, ['id', 'name', 'login', 'email', 'active', 'company_id', 'company_ids'], 0, 20], // M√°s resultados
      contextFree  // Context vac√≠o = sin restricciones
    );
    
    if (existingUsers && existingUsers.length > 0) {
      Logger.log(`üìä Encontrados ${existingUsers.length} usuarios candidatos`);
      
      // Mostrar todos los candidatos para debug
      existingUsers.forEach((user, index) => {
        Logger.log(`   ${index + 1}. ${user.name} (ID: ${user.id}, Login: ${user.login}, Activo: ${user.active}, Empresas: ${user.company_ids || user.company_id})`);
      });
      
      // Priorizar usuarios activos
      const activeUsers = existingUsers.filter(user => user.active !== false);
      
      if (activeUsers.length > 0) {
        const user = activeUsers[0];
        Logger.log(`‚úÖ Usuario ACTIVO seleccionado: ${user.name} (ID: ${user.id})`);
        return user.id;
      } else {
        // Si no hay activos, tomar el primero disponible
        const user = existingUsers[0];
        Logger.log(`‚ö†Ô∏è Usuario INACTIVO seleccionado: ${user.name} (ID: ${user.id}) - usando de todas formas`);
        return user.id;
      }
    }
    
    // 2. B√öSQUEDA ALTERNATIVA: Partners SIN restricciones de empresa
    Logger.log("üîé Buscando en res.partner (TODOS los contactos individuales)...");
    const partnerSearchCriteria = [
      ['name', 'ilike', salespersonName],
      ['is_company', '=', false]  // Solo contactos individuales
    ];
    
    const existingPartners = xmlrpcExecute(
      url, db, uid, password,
      'res.partner',
      'search_read',
      [partnerSearchCriteria, ['id', 'name', 'email', 'company_id'], 0, 20],
      contextFree  // Sin restricciones de empresa
    );
    
    if (existingPartners && existingPartners.length > 0) {
      Logger.log(`üìä Encontrados ${existingPartners.length} partners candidatos`);
      
      // Para cada partner, buscar si tiene usuario asociado
      for (const partner of existingPartners) {
        Logger.log(`   Verificando partner: ${partner.name} (ID: ${partner.id})`);
        
        const partnerUser = xmlrpcExecute(
          url, db, uid, password,
          'res.users',
          'search_read',
          [[['partner_id', '=', partner.id]], ['id', 'name', 'active'], 0, 1],
          contextFree  // Sin restricciones
        );
        
        if (partnerUser && partnerUser.length > 0) {
          const user = partnerUser[0];
          Logger.log(`‚úÖ Usuario encontrado via partner: ${user.name} (ID: ${user.id}, Partner: ${partner.name})`);
          return user.id;
        }
      }
      
      Logger.log(`‚ÑπÔ∏è Partners encontrados pero ninguno con usuario asociado`);
    }
    
    // 3. B√öSQUEDA POR COINCIDENCIA PARCIAL S√öPER FLEXIBLE
    Logger.log("üîé B√∫squeda s√∫per flexible por coincidencia parcial...");
    const flexibleSearch = [
      '|', '|',
      ['name', 'ilike', `%${salespersonName}%`],
      ['login', 'ilike', `%${salespersonName}%`],
      ['email', 'ilike', `%${salespersonName}%`]
    ];
    
    const flexibleUsers = xmlrpcExecute(
      url, db, uid, password,
      'res.users',
      'search_read',
      [flexibleSearch, ['id', 'name', 'login', 'active', 'company_id'], 0, 10],
      contextFree  // Sin restricciones
    );
    
    if (flexibleUsers && flexibleUsers.length > 0) {
      Logger.log(`üìä B√∫squeda flexible encontr√≥ ${flexibleUsers.length} candidatos:`);
      flexibleUsers.forEach((user, index) => {
        Logger.log(`   ${index + 1}. ${user.name} (ID: ${user.id}, Login: ${user.login})`);
      });
      
      const user = flexibleUsers[0];
      Logger.log(`‚úÖ Usuario seleccionado (coincidencia parcial): ${user.name} (ID: ${user.id})`);
      return user.id;
    }
    
    // 4. B√öSQUEDA DE RESPALDO: CUALQUIER usuario que pueda ser comercial
    Logger.log("üîé B√∫squeda de respaldo: cualquier usuario disponible...");
    try {
      // Buscar usuarios que NO sean internos del sistema (admin, etc.)
      const fallbackUsers = xmlrpcExecute(
        url, db, uid, password,
        'res.users',
        'search_read',
        [
          [
            ['active', '=', true],
            ['login', '!=', '__system__'],
            ['id', '>', 1]  // Excluir usuario admin (ID 1)
          ],
          ['id', 'name', 'login', 'company_id'], 
          0, 
          5
        ],
        contextFree  // Sin restricciones
      );
      
      if (fallbackUsers && fallbackUsers.length > 0) {
        const user = fallbackUsers[0];
        Logger.log(`‚ö†Ô∏è FALLBACK: Usando usuario disponible: ${user.name} (ID: ${user.id})`);
        return user.id;
      }
    } catch (fallbackError) {
      Logger.log("‚ö†Ô∏è Error en b√∫squeda de respaldo: " + fallbackError.toString());
    }
    
    Logger.log(`‚ùå NO se encontr√≥ NING√öN comercial con nombre: "${salespersonName}"`);
    Logger.log("üí° Posibles causas:");
    Logger.log("   - El nombre no coincide con ning√∫n usuario en Odoo");
    Logger.log("   - Problemas de permisos en la base de datos");
    Logger.log("   - Usuario inexistente o mal escrito");
    return null;
    
  } catch (error) {
    Logger.log("‚ùå Error CR√çTICO al buscar comercial: " + error.toString());
    Logger.log("üîß Stack trace: " + error.stack);
    return null;
  }
}

/**
 * Buscar pa√≠s basado en localidad y provincia
 */
function findCountryByLocation(url, db, uid, password, localidad, provincia) {
  try {
    Logger.log(`üåç Buscando pa√≠s para: Localidad="${localidad}", Provincia="${provincia}"`);
    
    // Mapeo de provincias argentinas para b√∫squeda r√°pida
    const argentineProvinces = [
      'buenos aires', 'ba', 'cordoba', 'c√≥rdoba', 'santa fe', 'mendoza', 'tucuman', 'tucum√°n',
      'entre rios', 'entre r√≠os', 'salta', 'misiones', 'chaco', 'corrientes', 'santiago del estero',
      'san juan', 'jujuy', 'rio negro', 'r√≠o negro', 'formosa', 'neuquen', 'neuqu√©n', 'chubut',
      'san luis', 'catamarca', 'la rioja', 'la pampa', 'santa cruz', 'tierra del fuego'
    ];
    
    // Primero verificar si es una provincia argentina conocida
    if (provincia) {
      const provinciaLower = provincia.toLowerCase().trim();
      const isArgentineProvince = argentineProvinces.some(argProv => 
        provinciaLower.includes(argProv) || argProv.includes(provinciaLower)
      );
      
      if (isArgentineProvince) {
        Logger.log("‚úÖ Provincia argentina detectada, usando Argentina (ID: 10)");
        return 10; // ID de Argentina
      }
    }
    
    // Si no es provincia argentina conocida, buscar din√°micamente
    let countryId = null;
    
    // 1. Buscar por provincia en res.country.state
    if (provincia && provincia.trim() !== '') {
      Logger.log(`üîç Buscando provincia: "${provincia}"`);
      
      const states = xmlrpcExecute(
        url, db, uid, password,
        'res.country.state',
        'search_read',
        [[['name', 'ilike', provincia]], ['id', 'name', 'country_id'], 0, 5]
      );
      
      if (states && states.length > 0) {
        countryId = states[0].country_id[0];
        const countryName = states[0].country_id[1];
        Logger.log(`‚úÖ Provincia encontrada: ${states[0].name}, Pa√≠s: ${countryName} (ID: ${countryId})`);
        return countryId;
      }
    }
    
    // 2. Si no encuentra por provincia, buscar por localidad en ciudades conocidas
    if (localidad && localidad.trim() !== '') {
      Logger.log(`üîç Buscando por localidad: "${localidad}"`);
      
      // Mapeo de ciudades importantes a pa√≠ses
      const cityCountryMapping = {
        // Argentina
        'buenos aires': 10, 'capital federal': 10, 'caba': 10, 'cordoba': 10, 'c√≥rdoba': 10,
        'rosario': 10, 'mendoza': 10, 'tucuman': 10, 'tucum√°n': 10, 'la plata': 10,
        'mar del plata': 10, 'salta': 10, 'san juan': 10, 'resistencia': 10, 'neuquen': 10,
        // Brasil
        'sao paulo': 31, 'rio de janeiro': 31, 'brasilia': 31, 'salvador': 31, 'fortaleza': 31,
        // Chile
        'santiago': 46, 'valparaiso': 46, 'valpara√≠so': 46, 'concepcion': 46, 'concepci√≥n': 46,
        // Uruguay
        'montevideo': 234, 'punta del este': 234, 'maldonado': 234,
        // Paraguay
        'asuncion': 179, 'asunci√≥n': 179, 'ciudad del este': 179,
        // Bolivia
        'la paz': 26, 'santa cruz': 26, 'cochabamba': 26, 'sucre': 26
      };
      
      const localidadLower = localidad.toLowerCase().trim();
      for (const [city, countryIdMap] of Object.entries(cityCountryMapping)) {
        if (localidadLower.includes(city) || city.includes(localidadLower)) {
          Logger.log(`‚úÖ Ciudad reconocida: ${localidad} ‚Üí Pa√≠s ID: ${countryIdMap}`);
          return countryIdMap;
        }
      }
    }
    
    // 3. B√∫squeda manual en partners de Odoo por localidad
    if (localidad && localidad.trim() !== '') {
      const partners = xmlrpcExecute(
        url, db, uid, password,
        'res.partner',
        'search_read',
        [[['city', 'ilike', localidad]], ['country_id'], 0, 3]
      );
      
      if (partners && partners.length > 0) {
        for (const partner of partners) {
          if (partner.country_id && partner.country_id[0]) {
            countryId = partner.country_id[0];
            Logger.log(`‚úÖ Pa√≠s encontrado por partners existentes: ID ${countryId}`);
            return countryId;
          }
        }
      }
    }
    
    // 4. Por defecto, usar Argentina si no se encuentra nada
    Logger.log("‚ö†Ô∏è No se pudo determinar el pa√≠s, usando Argentina por defecto (ID: 10)");
    return 10;
    
  } catch (error) {
    Logger.log("‚ùå Error buscando pa√≠s por ubicaci√≥n: " + error.toString());
    return 10; // Argentina por defecto
  }
}

/**
 * Buscar provincia mejorada con pa√≠s din√°mico
 */
function getProvinceIdDynamic(url, db, uid, password, provincia, countryId) {
  if (!provincia || provincia.trim() === '') return null;
  
  try {
    Logger.log(`üîç Buscando provincia: "${provincia}" en pa√≠s ID: ${countryId}`);
    
    // Buscar provincia en el pa√≠s espec√≠fico
    const searchCriteria = [
      ['name', 'ilike', provincia],
      ['country_id', '=', countryId]
    ];
    
    const provinces = xmlrpcExecute(
      url, db, uid, password,
      'res.country.state',
      'search_read',
      [searchCriteria, ['id', 'name', 'country_id'], 0, 1]
    );
    
    if (provinces && provinces.length > 0) {
      Logger.log(`‚úÖ Provincia encontrada: ${provinces[0].name} (ID: ${provinces[0].id})`);
      return provinces[0].id;
    }
    
    // Si no encuentra exacta, buscar parcial
    const partialSearch = [
      '|',
      ['name', 'ilike', `%${provincia}%`],
      ['code', 'ilike', provincia],
      ['country_id', '=', countryId]
    ];
    
    const partialProvinces = xmlrpcExecute(
      url, db, uid, password,
      'res.country.state',
      'search_read',
      [partialSearch, ['id', 'name', 'country_id'], 0, 3]
    );
    
    if (partialProvinces && partialProvinces.length > 0) {
      Logger.log(`‚úÖ Provincia encontrada (b√∫squeda parcial): ${partialProvinces[0].name} (ID: ${partialProvinces[0].id})`);
      return partialProvinces[0].id;
    }
    
    Logger.log(`‚ùå Provincia "${provincia}" no encontrada en pa√≠s ID: ${countryId}`);
    return null;
    
  } catch (error) {
    Logger.log("Error al buscar provincia: " + error.toString());
    return null;
  }
}

/**
 * Guardar env√≠o fallido para retry manual
 */
function saveFailedSubmission(formData, error) {
  try {
    Logger.log("üíæ Guardando env√≠o fallido para retry manual");
    
    // Crear un registro en el log con la informaci√≥n del error
    const errorData = {
      timestamp: new Date().toISOString(),
      formData: formData,
      error: error,
      status: 'FAILED'
    };
    
    Logger.log("‚ùå ENV√çO FALLIDO - DATOS PARA RETRY:");
    Logger.log(JSON.stringify(errorData, null, 2));
    
    // Opcional: Si tienes una hoja de c√°lculo configurada, puedes guardar ah√≠
    // const spreadsheetId = "TU_SPREADSHEET_ID_AQUI"; // Reemplazar con tu ID
    // const sheet = SpreadsheetApp.openById(spreadsheetId).getActiveSheet();
    // 
    // const row = [
    //   new Date(),
    //   formData.nombre || '',
    //   formData.apellido || '',
    //   formData.mail || '',
    //   formData.telefono || '',
    //   formData.localidad || '',
    //   formData.provincia || '',
    //   formData.concatenatedCheckboxes || '',
    //   formData.comentarios || '',
    //   formData.evento || '',
    //   error,
    //   'PENDIENTE'
    // ];
    // 
    // sheet.appendRow(row);
    // Logger.log("Env√≠o fallido guardado en hoja de c√°lculo");
    
  } catch (saveError) {
    Logger.log("Error al guardar env√≠o fallido: " + saveError.toString());
  }
}

/**
 * Enviar notificaci√≥n de error al administrador
 */
function sendErrorNotification(error, formEvent) {
  try {
    Logger.log("üìß Enviando notificaci√≥n de error al administrador");
    
    // Crear mensaje de error detallado
    const errorMessage = `
ERROR EN INTEGRACI√ìN GOOGLE FORMS ‚Üí ODOO
========================================

TIMESTAMP: ${new Date().toLocaleString('es-AR')}
ERROR: ${error.toString()}

STACK TRACE:
${error.stack || 'No disponible'}

DATOS DEL EVENTO:
${formEvent ? JSON.stringify(formEvent, null, 2) : 'No disponible'}

ACCI√ìN REQUERIDA:
- Revisar logs en Google Apps Script
- Verificar conectividad con Odoo
- Validar datos del formulario
    `;
    
    Logger.log("üö® NOTIFICACI√ìN DE ERROR:");
    Logger.log(errorMessage);
    
    // Opcional: Enviar email si tienes configurado
    // MailApp.sendEmail({
    //   to: 'admin@tuempresa.com',
    //   subject: 'üö® Error en integraci√≥n Google Forms ‚Üí Odoo',
    //   body: errorMessage
    // });
    
  } catch (notificationError) {
    Logger.log("Error al enviar notificaci√≥n: " + notificationError.toString());
  }
}

// ===============================
// DOCUMENTACI√ìN ACTUALIZADA
// ===============================

/**
 * üìÑ RESUMEN DE CONFIGURACI√ìN ACTUALIZADA
 * =======================================
 * 
 * ‚úÖ PROBLEMAS CORREGIDOS:
 * 
 * 1. ERROR DE SINTAXIS CORREGIDO:
 *    - L√≠nea 24: fieldMapping = {} cambiado a fieldMapping: {}
 * 
 * 2. B√öSQUEDA DIN√ÅMICA DE PA√çS IMPLEMENTADA:
 *    - No m√°s pa√≠s hardcodeado (Argentina por defecto)
 *    - findCountryByLocation() busca pa√≠s basado en localidad/provincia
 *    - Mapeo inteligente de provincias argentinas conocidas
 *    - Mapeo de ciudades importantes de Sudam√©rica (Argentina, Brasil, Chile, Uruguay, Paraguay, Bolivia)
 *    - B√∫squeda en res.country.state y partners existentes de Odoo
 *    - Fallback inteligente a Argentina si no se encuentra
 * 
 * CARACTER√çSTICAS PRINCIPALES:
 * 
 * 3. MAPEOS DE CAMPOS CORREGIDOS:
 *    - "Registrador" ‚Üí registrador (operador que registra)
 *    - "EMPRESAREGISTRADOR" ‚Üí empresaRegistradora (empresa registradora) 
 *    - "Asignado a" ‚Üí comercial (comercial asignado/salesperson)
 * 
 * 4. B√öSQUEDA MEJORADA DE PROVINCIAS:
 *    - getProvinceIdDynamic() busca en el pa√≠s correcto din√°micamente
 *    - B√∫squeda exacta y parcial por nombre y c√≥digo
 *    - Considera el pa√≠s encontrado para b√∫squeda precisa
 * 
 * 5. B√öSQUEDA DE COMERCIALES:
 *    - getSalespersonId() busca comerciales en Odoo
 *    - Asigna autom√°ticamente al campo user_id del lead
 *    - B√∫squeda m√∫ltiple: nombre, login, partner, email
 * 
 * 6. FORMATO HTML EN DESCRIPCI√ìN:
 *    - Notas internas formateadas como HTML con estilos profesionales
 *    - Colores, iconos y estructura visual mejorada
 *    - Informaci√≥n organizada en secciones claras con CSS inline
 * 
 * 7. CAMPOS PERSONALIZADOS:
 *    - Intenta guardar registrador en x_studio_registrador
 *    - Intenta guardar empresa en x_studio_empresa_registradora
 *    - Si no existen, incluye en descripci√≥n HTML
 * 
 * 8. FUNCIONES DE PRUEBA DISPONIBLES:
 *    - testNewFieldMappings(): Verifica mapeo de campos
 *    - testSalespersonSearch(): Prueba b√∫squeda de comerciales
 *    - testLocationSearch(): Prueba b√∫squeda din√°mica de ubicaci√≥n (NUEVA)
 * 
 * FLUJO DE B√öSQUEDA DE UBICACI√ìN:
 * 1. Analiza provincia ‚Üí Si es argentina conocida ‚Üí Retorna Argentina (ID: 10)
 * 2. Busca provincia en res.country.state ‚Üí Retorna pa√≠s de la provincia
 * 3. Busca localidad en mapeo de ciudades ‚Üí Retorna pa√≠s conocido
 * 4. Busca en partners existentes por ciudad ‚Üí Retorna pa√≠s encontrado
 * 5. Fallback ‚Üí Argentina (ID: 10)
 * 
 * PR√ìXIMOS PASOS PARA IMPLEMENTACI√ìN:
 * 1. ‚úÖ Corregir sintaxis y guardar script
 * 2. üîß Ejecutar testLocationSearch() para verificar b√∫squeda de ubicaci√≥n
 * 3. üîß Ejecutar testNewFieldMappings() para verificar mapeos * 4. üîß Ejecutar testSalespersonSearch() para probar b√∫squeda
 * 5. üìä Enlazar formulario con spreadsheet  
 * 6. ‚öôÔ∏è Configurar trigger de env√≠o autom√°tico
 * 7. üß™ Probar con env√≠o real del formulario
 */

// ===============================
// FUNCIONES DE PRUEBA
// ===============================

/**
 * Test de b√∫squeda de ubicaci√≥n (pa√≠ses y provincias)
 */
function testLocationSearch() {
  Logger.log("=== PRUEBA DE B√öSQUEDA DE UBICACI√ìN ===");
  
  try {
    // Autenticaci√≥n
    const uid = xmlrpcLogin(ODOO_CONFIG.url, ODOO_CONFIG.db, ODOO_CONFIG.login, ODOO_CONFIG.password);
    Logger.log("‚úÖ Autenticaci√≥n exitosa con UID: " + uid);
    
    // Prueba 1: Provincia argentina conocida
    Logger.log("\n--- Prueba 1: Buenos Aires, Argentina ---");
    const country1 = findCountryByLocation(ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password, "La Plata", "Buenos Aires");
    Logger.log("Resultado: " + JSON.stringify(country1));
    
    // Prueba 2: Ciudad brasile√±a
    Logger.log("\n--- Prueba 2: S√£o Paulo, Brasil ---");
    const country2 = findCountryByLocation(ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password, "S√£o Paulo", "");
    Logger.log("Resultado: " + JSON.stringify(country2));
    
    // Prueba 3: Ubicaci√≥n desconocida
    Logger.log("\n--- Prueba 3: Ubicaci√≥n desconocida ---");
    const country3 = findCountryByLocation(ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password, "Ciudad Inventada", "Provincia Inventada");
    Logger.log("Resultado: " + JSON.stringify(country3));
    
    Logger.log("‚úÖ Prueba de b√∫squeda de ubicaci√≥n completada");
    
  } catch (error) {
    Logger.log("‚ùå Error en prueba de ubicaci√≥n: " + error.toString());
  }
}

/**
 * Test de mapeo de campos nuevos
 */
function testNewFieldMappings() {
  Logger.log("=== PRUEBA DE MAPEO DE CAMPOS ===");
  
  // Simular datos de formulario
  const testFormData = {
    nombre: "Juan",
    apellido: "P√©rez",
    mail: "juan.perez@test.com",
    telefono: "+54 11 1234-5678",
    localidad: "Buenos Aires",
    provincia: "Buenos Aires",
    operadorApp: "Mar√≠a Garc√≠a",
    empresaOperador: "DyE Agro",
    comercialAsignado: "Carlos Vendedor",
    verticales: "WeedSeeker, Soluci√≥n de Siembra",
    comentarios: "Cliente interesado en tecnolog√≠a de precisi√≥n",
    evento: "Expo Campo 2025"
  };
  
  Logger.log("üìã Datos de prueba:");
  Logger.log(JSON.stringify(testFormData, null, 2));
  
  Logger.log("\nüîÑ Procesando verticales...");
  const concatenatedVerticals = processVerticales(testFormData);
  Logger.log("Verticales concatenadas: " + concatenatedVerticals);
  
  Logger.log("‚úÖ Prueba de mapeo completada");
}

/**
 * Test de b√∫squeda de vendedores
 */
function testSalespersonSearch() {
  Logger.log("=== PRUEBA DE B√öSQUEDA DE VENDEDORES ===");
  
  try {
    // Autenticaci√≥n
    const uid = xmlrpcLogin(ODOO_CONFIG.url, ODOO_CONFIG.db, ODOO_CONFIG.login, ODOO_CONFIG.password);
    Logger.log("‚úÖ Autenticaci√≥n exitosa con UID: " + uid);
    
    // Prueba 1: Buscar vendedor existente
    Logger.log("\n--- Prueba 1: Buscar vendedor ---");
    const salesperson1 = getSalespersonId(ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password, "Admin");
    Logger.log("Resultado b√∫squeda 'Admin': " + JSON.stringify(salesperson1));
    
    // Prueba 2: Buscar vendedor por email
    Logger.log("\n--- Prueba 2: Buscar por email ---");
    const salesperson2 = getSalespersonId(ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password, "admin@example.com");
    Logger.log("Resultado b√∫squeda por email: " + JSON.stringify(salesperson2));
    
    // Prueba 3: Vendedor inexistente
    Logger.log("\n--- Prueba 3: Vendedor inexistente ---");
    const salesperson3 = getSalespersonId(ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password, "Vendedor Inexistente");
    Logger.log("Resultado vendedor inexistente: " + JSON.stringify(salesperson3));
    
    Logger.log("‚úÖ Prueba de b√∫squeda de vendedores completada");
    
  } catch (error) {
    Logger.log("‚ùå Error en prueba de vendedores: " + error.toString());
  }
}

/**
 * Test espec√≠fico para b√∫squeda GLOBAL de comerciales (sin restricciones de empresa)
 */
function testGlobalSalespersonSearch() {
  Logger.log("=== PRUEBA B√öSQUEDA GLOBAL DE COMERCIALES ===");
  
  try {
    // Autenticaci√≥n
    const uid = xmlrpcLogin(ODOO_CONFIG.url, ODOO_CONFIG.db, ODOO_CONFIG.login, ODOO_CONFIG.password);
    Logger.log("‚úÖ Autenticaci√≥n exitosa con UID: " + uid);
    
    // 1. Listar TODOS los usuarios sin filtros para ver qu√© hay disponible
    Logger.log("\n--- PASO 1: Listando TODOS los usuarios disponibles ---");
    const allUsers = xmlrpcExecute(
      ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password,
      'res.users',
      'search_read',
      [[], ['id', 'name', 'login', 'active', 'company_id', 'company_ids'], 0, 10],
      {}  // Context vac√≠o
    );
    
    if (allUsers && allUsers.length > 0) {
      Logger.log(`üìä Total usuarios encontrados: ${allUsers.length}`);
      allUsers.forEach((user, index) => {
        Logger.log(`   ${index + 1}. ${user.name} (ID: ${user.id}, Login: ${user.login}, Activo: ${user.active})`);
        Logger.log(`      Empresa actual: ${user.company_id || 'N/A'}, Empresas: ${user.company_ids || 'N/A'}`);
      });
    } else {
      Logger.log("‚ùå No se encontraron usuarios");
    }
    
    // 2. Pruebas de b√∫squeda espec√≠ficas
    const testNames = ["Admin", "admin", "Administrator", "Usuario", "Test"];
    
    for (const testName of testNames) {
      Logger.log(`\n--- PASO 2: Probando b√∫squeda de "${testName}" ---`);
      const foundUser = getSalespersonId(ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password, testName);
      
      if (foundUser) {
        Logger.log(`‚úÖ √âXITO: Comercial "${testName}" encontrado con ID: ${foundUser}`);
      } else {
        Logger.log(`‚ùå FALLO: No se encontr√≥ comercial "${testName}"`);
      }
    }
    
    // 3. Verificar contexto de empresa actual
    Logger.log("\n--- PASO 3: Verificando contexto de usuario actual ---");
    const currentUser = xmlrpcExecute(
      ODOO_CONFIG.url, ODOO_CONFIG.db, uid, ODOO_CONFIG.password,
      'res.users',
      'read',
      [uid, ['name', 'company_id', 'company_ids']]
    );
    
    if (currentUser) {
      Logger.log(`Usuario actual: ${currentUser.name}`);
      Logger.log(`Empresa actual: ${currentUser.company_id || 'N/A'}`);
      Logger.log(`Empresas accesibles: ${currentUser.company_ids || 'N/A'}`);
    }
    
    Logger.log("\n‚úÖ PRUEBA DE B√öSQUEDA GLOBAL COMPLETADA");
    
  } catch (error) {
    Logger.log("‚ùå Error en prueba global de comerciales: " + error.toString());
    Logger.log("üîß Stack trace: " + error.stack);
  }
}

/**
 * Test completo de integraci√≥n
 */
function testCompleteIntegration() {
  Logger.log("=== PRUEBA COMPLETA DE INTEGRACI√ìN ===");
  
  // Simular evento de formulario
  const mockFormEvent = {
    response: {
      getItemResponses: function() {
        return [
          {
            getItem: function() { return { getTitle: function() { return "Nombre"; } }; },
            getResponse: function() { return "Juan"; }
          },
          {
            getItem: function() { return { getTitle: function() { return "Apellido"; } }; },
            getResponse: function() { return "P√©rez"; }
          },
          {
            getItem: function() { return { getTitle: function() { return "Email"; } }; },
            getResponse: function() { return "juan.perez@test.com"; }
          },
          {
            getItem: function() { return { getTitle: function() { return "Tel√©fono"; } }; },
            getResponse: function() { return "+54 11 1234-5678"; }
          }
        ];
      }
    }
  };
  
  try {
    Logger.log("üöÄ Iniciando prueba completa...");
    onFormSubmit(mockFormEvent);
    Logger.log("‚úÖ Prueba completa finalizada - revisar logs anteriores");
    
  } catch (error) {
    Logger.log("‚ùå Error en prueba completa: " + error.toString());
  }
}
