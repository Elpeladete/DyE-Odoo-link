/**
 * Script de Debug para Google Forms to Odoo Integration
 * Este archivo contiene funciones espec√≠ficas para debuggear los problemas identificados
 */

/**
 * Test espec√≠fico para el mapeo de campos problem√°ticos
 */
function testFieldMappingFixes() {
  Logger.log("=== TEST DE CORRECCIONES DE MAPEO ===");
  
  // Simular las preguntas problem√°ticas que aparec√≠an en los logs
  const testQuestions = [
    "EMPRESAREGISTRADOR",  // Deber√≠a mapear a "empresaRegistradora" no "registrador"
    "Registrador",         // Deber√≠a mapear a "registrador"
    "Asignado a:",         // Deber√≠a mapear a "comercial"
    "EMAIL",               // Deber√≠a mapear a "mail"
    "NOMBRE",              // Deber√≠a mapear a "nombre"
    "APELLIDO"             // Deber√≠a mapear a "apellido"
  ];
  
  Logger.log("üß™ Probando mapeos corregidos:");
  testQuestions.forEach(question => {
    const mappedField = mapQuestionToField(question);
    Logger.log(`  "${question}" ‚Üí "${mappedField}"`);
    
    // Validaciones espec√≠ficas
    if (question === "EMPRESAREGISTRADOR" && mappedField !== "empresaRegistradora") {
      Logger.log(`  ‚ùå ERROR: EMPRESAREGISTRADOR deber√≠a mapear a "empresaRegistradora", no a "${mappedField}"`);
    } else if (question === "EMPRESAREGISTRADOR" && mappedField === "empresaRegistradora") {
      Logger.log(`  ‚úÖ CORRECTO: EMPRESAREGISTRADOR mapea correctamente a "empresaRegistradora"`);
    }
  });
  
  Logger.log("\n‚úÖ Test de mapeo completado");
}

/**
 * Test para validar que los campos personalizados ya no se usan
 */
function testNoCustomFields() {
  Logger.log("=== TEST DE ELIMINACI√ìN DE CAMPOS PERSONALIZADOS ===");
  
  // Simular datos de formulario
  const testFormData = {
    nombre: "Juan",
    apellido: "P√©rez",
    mail: "juan.perez@test.com",
    telefono: "+54 11 1234-5678",
    localidad: "Buenos Aires",
    provincia: "Buenos Aires",
    registrador: "Mar√≠a Garc√≠a",          // Operador que registra
    empresaRegistradora: "DyE Agro",      // Empresa registradora
    comercial: "Carlos Vendedor",         // Comercial asignado
    verticales: "WeedSeeker, Soluci√≥n de Siembra",
    comentarios: "Cliente interesado en tecnolog√≠a de precisi√≥n",
    evento: "Expo Campo 2025"
  };
  
  try {
    Logger.log("üîç Simulando creaci√≥n de lead (sin enviar a Odoo)...");
    
    // Simular el proceso de construcci√≥n de datos
    const nombreCompleto = testFormData.nombre + " " + testFormData.apellido;
    const verticalesParaTitulo = testFormData.verticales || 'Consulta General';
    
    // Validar email
    const emailField = (testFormData.mail && testFormData.mail.trim() !== '') ? testFormData.mail.trim() : null;
    
    const simulatedOdooData = {
      'name': `${nombreCompleto} - ${verticalesParaTitulo}`,
      'contact_name': nombreCompleto,
      'phone': testFormData.telefono || '',
      'description': "Descripci√≥n HTML simulada",
      'type': 'lead',
      'street': testFormData.localidad || '',
      'city': testFormData.localidad || '',
      'country_id': 10, // Argentina por defecto
      'referred': testFormData.evento || ''
    };
    
    // Agregar email solo si es v√°lido
    if (emailField) {
      simulatedOdooData['email_from'] = emailField;
      Logger.log("‚úÖ Email agregado: " + emailField);
    } else {
      Logger.log("‚ö†Ô∏è Email vac√≠o o inv√°lido, no se agregar√° al lead");
    }
    
    // Verificar que NO se usen campos personalizados
    Logger.log("\nüîç Verificando que NO se usen campos personalizados...");
    const customFields = ['x_studio_registrador', 'x_studio_empresa_registradora'];
    let customFieldsFound = false;
    
    customFields.forEach(field => {
      if (simulatedOdooData.hasOwnProperty(field)) {
        Logger.log(`‚ùå ERROR: Se encontr√≥ campo personalizado "${field}" que deber√≠a estar eliminado`);
        customFieldsFound = true;
      }
    });
    
    if (!customFieldsFound) {
      Logger.log("‚úÖ CORRECTO: No se usan campos personalizados");
    }
    
    Logger.log("\nüìã Datos simulados de Odoo:");
    Logger.log(JSON.stringify(simulatedOdooData, null, 2));
    
    Logger.log("\n‚úÖ Test de campos personalizados completado");
    
  } catch (error) {
    Logger.log("‚ùå Error en test: " + error.toString());
  }
}

/**
 * Test para validar la descripci√≥n HTML
 */
function testHtmlDescription() {
  Logger.log("=== TEST DE DESCRIPCI√ìN HTML ===");
  
  const testData = {
    nombre: "Juan",
    apellido: "P√©rez",
    telefono: "+54 11 1234-5678",
    mail: "juan.perez@test.com",
    localidad: "Buenos Aires",
    provincia: "Buenos Aires",
    pais: "Argentina",
    concatenatedCheckboxes: "WeedSeeker, Soluci√≥n de Siembra, Post Venta",
    comentarios: "Cliente muy interesado en tecnolog√≠a de precisi√≥n para ma√≠z",
    montoEstimado: "$50,000",
    presupuesto: "Alto",
    registrador: "Mar√≠a Garc√≠a",
    empresaRegistradora: "DyE Agro",
    comercial: "Carlos Vendedor",
    evento: "Expo Campo 2025"
  };
  
  const nombreCompleto = testData.nombre + " " + testData.apellido;
  
  // Simular construcci√≥n de descripci√≥n HTML
  let descripcion = `<div style="font-family: Arial, sans-serif; line-height: 1.6;">`;
  descripcion += `<h2 style="color: #2E75B6; margin-bottom: 20px;">üìã INFORMACI√ìN DEL PROSPECTO</h2>`;
  
  descripcion += `<div style="margin-bottom: 20px;">`;
  descripcion += `<h3 style="color: #1B5E20; border-bottom: 2px solid #4CAF50; padding-bottom: 5px;">üë§ DATOS PERSONALES</h3>`;
  descripcion += `<ul style="margin: 10px 0; padding-left: 20px;">`;
  descripcion += `<li><strong>Nombre completo:</strong> ${nombreCompleto}</li>`;
  descripcion += `<li><strong>Tel√©fono:</strong> ${testData.telefono}</li>`;
  descripcion += `<li><strong>Email:</strong> ${testData.mail}</li>`;
  descripcion += `</ul>`;
  descripcion += `</div>`;
  
  descripcion += `<div style="margin-bottom: 20px;">`;
  descripcion += `<h3 style="color: #1B5E20; border-bottom: 2px solid #4CAF50; padding-bottom: 5px;">üìã INFORMACI√ìN DE REGISTRO</h3>`;
  descripcion += `<ul style="margin: 10px 0; padding-left: 20px;">`;
  descripcion += `<li><strong>Registrador (Operador):</strong> ${testData.registrador}</li>`;
  descripcion += `<li><strong>Empresa Registradora:</strong> ${testData.empresaRegistradora}</li>`;
  descripcion += `<li><strong>Comercial Asignado:</strong> ${testData.comercial}</li>`;
  descripcion += `<li><strong>Evento:</strong> ${testData.evento}</li>`;
  descripcion += `</ul>`;
  descripcion += `</div>`;
  
  descripcion += `</div>`;
  
  Logger.log("üìÑ Descripci√≥n HTML generada:");
  Logger.log(descripcion);
  
  // Verificar que contiene los datos importantes
  const importantData = [
    testData.registrador,
    testData.empresaRegistradora, 
    testData.comercial,
    testData.evento
  ];
  
  let allDataIncluded = true;
  importantData.forEach(data => {
    if (!descripcion.includes(data)) {
      Logger.log(`‚ùå ERROR: Dato "${data}" no encontrado en descripci√≥n`);
      allDataIncluded = false;
    }
  });
  
  if (allDataIncluded) {
    Logger.log("‚úÖ CORRECTO: Todos los datos importantes est√°n en la descripci√≥n HTML");
  }
  
  Logger.log("\n‚úÖ Test de descripci√≥n HTML completado");
}

/**
 * Test completo de todas las correcciones
 */
function testAllFixes() {
  Logger.log("üöÄ EJECUTANDO TODOS LOS TESTS DE CORRECCI√ìN");
  Logger.log("=" + "=".repeat(50));
  
  try {
    testFieldMappingFixes();
    Logger.log("\n" + "-".repeat(30));
    testNoCustomFields();
    Logger.log("\n" + "-".repeat(30));
    testHtmlDescription();
    
    Logger.log("\n" + "=" + "=".repeat(50));
    Logger.log("üéâ TODOS LOS TESTS COMPLETADOS");
    Logger.log("üìã RESUMEN DE CORRECCIONES:");
    Logger.log("‚úÖ Mapeo de campos corregido (EMPRESAREGISTRADOR ‚Üí empresaRegistradora)");
    Logger.log("‚úÖ Campos personalizados eliminados (x_studio_*)");
    Logger.log("‚úÖ Validaci√≥n de email implementada");
    Logger.log("‚úÖ Descripci√≥n HTML contiene todos los datos");
    Logger.log("\nüîÑ PR√ìXIMO PASO: Probar con conexi√≥n real a Odoo");
    
  } catch (error) {
    Logger.log("‚ùå Error en tests: " + error.toString());
  }
}
